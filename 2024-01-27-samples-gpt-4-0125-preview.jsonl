{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Sort the list to ensure that any close elements are adjacent\n    numbers.sort()\n    # Iterate through the sorted list and check if the difference between\n    # consecutive elements is less than the threshold\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize variables\n    stack = []\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            # If the stack is empty, we're starting a new group\n            if not stack:\n                current_group = char\n            else:\n                current_group += char\n            stack.append(char)\n        elif char == ')':\n            current_group += char\n            stack.pop()\n            # If the stack is empty, we've closed a group\n            if not stack:\n                result.append(current_group)\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Extract the decimal part by subtracting the integer part from the number\n    decimal_part = number - int(number)\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences from the mean\n    absolute_differences = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean of these absolute differences\n    mad = sum(absolute_differences) / len(absolute_differences)\n    \n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the input string into individual groups based on spaces\n    groups = paren_string.split()\n    max_depths = []\n\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n\n    return max_depths"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = reduce(operator.mul, numbers, 1)\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    max_list = [numbers[0]]  # Initialize the list with the first element\n    current_max = numbers[0]  # Initialize current max with the first element\n    \n    for number in numbers[1:]:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    \n    return max_list"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n    return string + string[::-1]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(make_palindrome(''))  # Output: ''\n    print(make_palindrome('cat'))  # Output: 'catac'\n    print(make_palindrome('cata'))  # Output: 'catac'"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Convert the strings to integers, perform XOR, then convert back to binary string\n    # The binary string representation starts with '0b', so we slice it off using [2:]\n    # Finally, we use zfill to ensure the result has the same length as the input strings\n    result = bin(int(a, 2) ^ int(b, 2))[2:].zfill(len(a))\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:  # Check if the list is empty\n        return None\n    return max(strings, key=len)  # Return the longest string, first one in case of a tie"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n# Example usage\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))  # Output: 3\n    print(count_distinct_characters('Jerry'))   # Output: 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Split the input string into a list of note symbols\n    notes = music_string.split()\n    # Initialize an empty list to store the duration of each note\n    durations = []\n    # Loop through each note symbol in the list\n    for note in notes:\n        # Check the type of note and append its duration to the durations list\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations\n\n# Example usage\nif __name__ == \"__main__\":\n    music_string = 'o o| .| o| o| .| .| .| .| o o'\n    print(parse_music(music_string))"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    number_words = numbers.split()\n    \n    # Sort the list of number words based on their numeric value\n    sorted_number_words = sorted(number_words, key=lambda word: number_map[word])\n    \n    # Join the sorted list back into a string and return it\n    return ' '.join(sorted_number_words)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Sort the list to make it easier to find the closest elements\n    sorted_numbers = sorted(numbers)\n    # Initialize variables to store the closest pair and the smallest difference found so far\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    smallest_difference = abs(sorted_numbers[1] - sorted_numbers[0])\n    # Iterate through the sorted list to find the pair with the smallest difference\n    for i in range(len(sorted_numbers) - 1):\n        current_difference = abs(sorted_numbers[i+1] - sorted_numbers[i])\n        if current_difference < smallest_difference:\n            smallest_difference = current_difference\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n    return closest_pair\n\n# Example usage\nif __name__ == \"__main__\":\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Example usage\nif __name__ == \"__main__\":\n    print(largest_divisor(15))"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Define a function that represents the polynomial equation poly(xs, x) = 0\n    def equation(x):\n        return poly(xs, x)\n    \n    # Use fsolve to find a root, starting from an initial guess of 0\n    root = fsolve(equation, 0.0)\n    \n    # fsolve returns an array, so we extract the first element as the root\n    return root[0]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Extract elements at indices divisible by 3 (0-based indexing)\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    \n    # Sort these elements\n    divisible_by_three_elements.sort()\n    \n    # Place sorted elements back into the list\n    sorted_index = 0\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            l[i] = divisible_by_three_elements[sorted_index]\n            sorted_index += 1\n    \n    return l\n\n# Test the function with the provided examples\nprint(sort_third([1, 2, 3]))  # Expected: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Expected: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at even indices\n    even_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the extracted elements\n    even_elements_sorted = sorted(even_elements)\n    \n    # Create a new list to hold the result\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            # For even indices, use the sorted elements\n            result.append(even_elements_sorted[even_index])\n            even_index += 1\n        else:\n            # For odd indices, use the original elements\n            result.append(l[i])\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\n    print(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group in the opposite direction. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "from math import sqrt\n\ndef is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fib(n):\n    \"\"\"Generate the n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\ndef prime_fib(n):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    count = 0\n    fib_num = 0\n    while True:\n        if is_prime(fib(fib_num)):\n            count += 1\n            if count == n:\n                return fib(fib_num)\n        fib_num += 1\n\n# Example usage\nif __name__ == \"__main__\":\n    print(prime_fib(1))  # 2\n    print(prime_fib(2))  # 3\n    print(prime_fib(3))  # 5\n    print(prime_fib(4))  # 13\n    print(prime_fib(5))  # 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()  # Sort the list to make it easier to avoid duplicates and use two pointers\n    n = len(l)\n    for i in range(n-2):  # We need at least three numbers to continue\n        # Avoid duplicates for the first number\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1  # Two pointers\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Example usage\nif __name__ == \"__main__\":\n    print(triples_sum_to_zero([1, 3, 5, 0]))  # False\n    print(triples_sum_to_zero([1, 3, -2, 1]))  # True\n    print(triples_sum_to_zero([1, 2, 3, 7]))  # False\n    print(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\n    print(triples_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving towards each other.\n    \n    Args:\n    n (int): The number of cars in each set moving towards each other.\n    \n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    # Since each car moving left to right will collide with each car moving right to left,\n    # the total number of collisions is simply n * n.\n    return n * n\n\n# Example usage\nn = 5\nprint(car_race_collision(n))  # Output: 25"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(change_base(8, 3))  # Output: '22'\n    print(change_base(8, 2))  # Output: '1000'\n    print(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Example usage\nif __name__ == \"__main__\":\n    print(triangle_area(5, 3))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        return sorted_list[mid]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # A string is a palindrome if it is equal to its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Initialize result\n    result = 1\n    \n    # Update base to 2 % p\n    base = 2 % p\n    \n    while n > 0:\n        # If n is odd, multiply base with result\n        if n % 2 == 1:\n            result = (result * base) % p\n        \n        # n must be even now\n        n = n >> 1  # n = n/2\n        base = (base * base) % p\n    \n    return result"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert both lists to sets to find common elements and remove duplicates\n    common_elements = set(l1) & set(l2)\n    # Convert the set back to a list and sort it before returning\n    return sorted(list(common_elements))\n\n# Example usage\nif __name__ == \"__main__\":\n    print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    print(common([5, 3, 2, 8], [3, 2]))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all the 2s\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Now n must be odd, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime\n\n# Example usage\nif __name__ == \"__main__\":\n    print(largest_prime_factor(13195))  # Output: 29\n    print(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # The derivative of a constant is 0, so we skip the first element (xs[0])\n    # and start with the coefficient of x which is xs[1].\n    # We multiply each coefficient by its corresponding power of x (i.e., its index)\n    # and decrease the power by 1, which is effectively done by shifting the coefficients left.\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\n    print(derivative([1, 2, 3]))       # Output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    This function efficiently computes the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize base cases\n    a, b, c = 0, 0, 1\n    \n    # Compute fibfib(n) iteratively\n    for _ in range(3, n + 1):\n        # Compute the next number in the sequence\n        next_number = a + b + c\n        # Update the previous three numbers\n        a, b, c = b, c, next_number\n    \n    return c\n\n# Example usage\nif __name__ == \"__main__\":\n    print(fibfib(1))  # Output: 0\n    print(fibfib(5))  # Output: 4\n    print(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"python\"))  # Additional test case, expected output: 1\nprint(vowels_count(\"fly\"))  # Additional test case, expected output: 1\nprint(vowels_count(\"rhythm\"))  # Additional test case, expected output: 0"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    len_x = len(x_str)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift >= len_x:\n        return x_str[::-1]\n    \n    # Perform the circular shift\n    shift %= len_x  # In case shift is larger than len_x\n    shifted_x = x_str[-shift:] + x_str[:-shift]\n    return shifted_x\n\n# Test the function\nprint(circular_shift(12, 1))  # Expected output: \"21\"\nprint(circular_shift(12, 2))  # Expected output: \"12\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the character to the sum\n            sum += ord(char)\n    # Return the final sum\n    return sum\n\n# Test cases\nprint(digitSum(\"\"))  # => 0\nprint(digitSum(\"abAB\"))  # => 131\nprint(digitSum(\"abcCd\"))  # => 67\nprint(digitSum(\"helloE\"))  # => 69\nprint(digitSum(\"woArBld\"))  # => 131\nprint(digitSum(\"aAaaaXa\"))  # => 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Split the string to extract the numbers\n    parts = s.split()\n    # Extract the number of apples and oranges from the string\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n\n# Example usage\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    index = -1\n    \n    # Iterate through the array to find the smallest even value\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    \n    # Check if an even value was found\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(pluck([4,2,3]))  # Output: [2, 1]\n    print(pluck([1,2,3]))  # Output: [2, 1]\n    print(pluck([]))       # Output: []\n    print(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    freq = Counter(lst)\n    result = -1\n    for key, value in freq.items():\n        if key <= value:\n            result = max(result, key)\n    return result\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_lst = sorted(lst)\n    strange_sorted_list = []\n    while sorted_lst:\n        strange_sorted_list.append(sorted_lst.pop(0))  # Take and remove the smallest\n        if sorted_lst:  # Check if there are still elements left\n            strange_sorted_list.append(sorted_lst.pop())  # Take and remove the largest\n    return strange_sorted_list"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # If not a valid triangle, return -1\n        return -1\n\n# Example usage\nprint(triangle_area(3, 4, 5))  # Expected output: 6.00\nprint(triangle_area(1, 2, 10)) # Expected output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    is_balanced = q == q[::-1]\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    # Return True if it's balanced and the total weight is less than or equal to the maximum possible weight\n    return is_balanced and total_weight <= w\n\n# Example usage\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n# Example usage\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Example usage\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Returns true if the given number is the multiplication of 3 prime numbers and false otherwise.\"\"\"\n    if a < 2:\n        return False\n    \n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n\n# Example usage\nprint(is_multiply_prime(30))  # True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Returns true if x is a simple power of n, false otherwise.\n    \"\"\"\n    # Edge case: n cannot be 0 or 1 when x is not equal to these values\n    if n in [0, 1] and x not in [0, 1]:\n        return False\n    \n    # Edge case: x is 0 or 1, which are simple powers of themselves\n    if x in [0, 1]:\n        return True\n    \n    # Calculate the nth root of x and check if it's an integer\n    nth_root = x ** (1/n)\n    return nth_root.is_integer()\n\n# Example usage\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    # Check if the cube root of a is an integer\n    cube_root = a ** (1/3)\n    # For negative numbers, we take the absolute value before checking\n    # if it's an integer since (-n)^(1/3) is -root(n)\n    if a < 0:\n        cube_root = abs(cube_root)\n    # Check if the cube root, rounded to the nearest integer, cubed is equal to the original number\n    return round(cube_root) ** 3 == a\n\n# Example usage\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # Prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count\n\n# Example usage\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))  # Output: 1\n    print(hex_key(\"1077E\"))  # Output: 2\n    print(hex_key(\"ABED1A33\"))  # Output: 4\n    print(hex_key(\"123456789ABCDEF0\"))  # Output: 6\n    print(hex_key(\"2020\"))  # Output: 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format with 'db' at the beginning and end of the string.\"\"\"\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"\n\n# Example usage\nprint(decimal_to_binary(15))  # Output: db1111db\nprint(decimal_to_binary(32))  # Output: db100000db"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"Check if the string is happy or not.\n    \n    Args:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # A string is not happy if its length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of 3 consecutive letters\n    for i in range(len(s) - 2):\n        # If any 3 consecutive letters are not distinct, the string is not happy\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    # If all checks pass, the string is happy\n    return True\n\n# Example usage\nprint(is_happy(\"a\"))    # False\nprint(is_happy(\"aa\"))   # False\nprint(is_happy(\"abcd\")) # True\nprint(is_happy(\"aabb\")) # False\nprint(is_happy(\"adb\"))  # True\nprint(is_happy(\"xyy\"))  # False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numerical GPAs into letter grades based on a specific grading scale.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\"\"\"\n    return is_prime(len(string))\n\n# Examples\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        # Special case: If n is 1, there's only 1 such number, which is 1 itself.\n        return 1\n    else:\n        # Calculate the total count as explained above.\n        return 9**(n-1) + 9*10**(n-2) - 10**(n-2)\n\n# Example usage\nn = 3\nprint(starts_one_ends(n))"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary and return it\n    return bin(sum_of_digits)[2:]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(solve(1000))  # Output: \"1\"\n    print(solve(150))   # Output: \"110\"\n    print(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Example usage\nprint(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    # Split the input string into words\n    words = s.split(' ')\n    \n    # Process each word\n    ordered_words = []\n    for word in words:\n        # Sort the characters in the word based on their ASCII values\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    # Join the processed words back into a string with spaces\n    return ' '.join(ordered_words)\n\n# Test cases\nprint(anti_shuffle('Hi'))  # Output: 'Hi'\nprint(anti_shuffle('hello'))  # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Finds the coordinates of integers x in a 2D list and returns a list of tuples\n    with coordinates sorted by rows in ascending order and columns in descending order.\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n\n# Example usage\nif __name__ == \"__main__\":\n    print(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))\n    print(get_row([], 1))\n    print(get_row([[], [1], [1, 2, 3]], 3))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Copy the given array to avoid changing it\n    sorted_array = array.copy()\n    \n    # Check if the array is empty or contains only one element\n    if len(sorted_array) <= 1:\n        return sorted_array\n    \n    # Determine the sorting order based on the sum of the first and last elements\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        # Sort in descending order\n        sorted_array.sort(reverse=True)\n    else:\n        # Sort in ascending order\n        sorted_array.sort()\n    \n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():  # Check if the character is an alphabet\n            shift = 2 * 2  # Define the shift value\n            if char.islower():\n                # Calculate the new character (for lowercase)\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                # Calculate the new character (for uppercase)\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            # If the character is not an alphabet, just append it as it is\n            result += char\n    return result\n\n# Example usage\nprint(encrypt('hi'))  # Output: 'lm'\nprint(encrypt('asdfghjkl'))  # Output: 'ewhjklnop'\nprint(encrypt('gf'))  # Output: 'kj'\nprint(encrypt('et'))  # Output: 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    # Remove duplicates by converting the list to a set\n    unique_elements = set(lst)\n    \n    # If there are less than 2 unique elements, return None\n    if len(unique_elements) < 2:\n        return None\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(unique_elements)\n    \n    # Return the 2nd element in the sorted list\n    return sorted_list[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Expected output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Expected output: 2\nprint(next_smallest([]))  # Expected output: None\nprint(next_smallest([1, 1]))  # Expected output: None"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    \n    # Initialize boredom count\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Strip leading and trailing whitespace and check if it starts with 'I '\n        if sentence.strip().startswith('I '):\n            boredom_count += 1\n    \n    return boredom_count\n\n# Example usage\nif __name__ == \"__main__\":\n    print(is_bored(\"Hello world\"))  # Expected output: 0\n    print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Expected output: 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if any number is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n\n# Example usage\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels\n    with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    # Define vowels and their replacements\n    vowels = 'aeiouAEIOU'\n    replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                    'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Swap case and replace vowels\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            # Replace vowel and maintain case\n            encoded_message += replacements[char]\n        else:\n            # Swap case for non-vowels\n            encoded_message += char.swapcase()\n    \n    return encoded_message\n\n# Test the function\nif __name__ == \"__main__\":\n    print(encode('test'))  # Expected: 'TGST'\n    print(encode('This is a message'))  # Expected: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "from math import sqrt\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    # Filter the list to keep only prime numbers\n    primes = [num for num in lst if is_prime(num)]\n    \n    # Find the largest prime number\n    if not primes:\n        return 0  # Return 0 if there are no prime numbers\n    largest_prime = max(primes)\n    \n    # Calculate the sum of the digits of the largest prime number\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    \n    return sum_of_digits\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False  # Return False if the dictionary is empty\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return all_lower or all_upper\n\n# Example usage\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))  # True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\n# Examples\nprint(count_up_to(5))  # => [2,3]\nprint(count_up_to(11)) # => [2,3,5,7]\nprint(count_up_to(0))  # => []\nprint(count_up_to(20)) # => [2,3,5,7,11,13,17,19]\nprint(count_up_to(1))  # => []\nprint(count_up_to(18)) # => [2,3,5,7,11,13,17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extract the unit digit from each number by getting the remainder when divided by 10\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Test the function with the provided examples\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))    # should return 72\nprint(multiply(2020, 1851))# should return 0\nprint(multiply(14, -15))   # should return 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define the uppercase vowels\n    vowels = 'AEIOU'\n    count = 0\n    \n    # Iterate through the string, checking only even indices\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n            \n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    lower = int(num)\n    upper = lower + 1 if num > 0 else lower - 1\n    if abs(num - lower) < abs(num - upper):\n        return lower\n    elif abs(num - lower) > abs(num - upper):\n        return upper\n    else:\n        return upper if num > 0 else lower\n\n# Example usage\nprint(closest_integer(\"10\"))  # 10\nprint(closest_integer(\"15.3\"))  # 15\nprint(closest_integer(\"14.5\"))  # 15\nprint(closest_integer(\"-14.5\"))  # -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:  # If the last number of stones is even\n            stones.append(stones[-1] + 2)  # Add the next even number\n        else:  # If the last number of stones is odd\n            stones.append(stones[-1] + 2)  # Add the next odd number\n    return stones"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Use regular expression to split the string by either commas or spaces\n    words = re.split(r'[,\\s]\\s*', s)\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n    \n    # Start from y and go down to x\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:  # Check if the number is even\n            return num\n    \n    # If no even number is found\n    return -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        # Calculate the sum of integers from n to m using the formula for the sum of an arithmetic series\n        total_sum = (m - n + 1) * (n + m) // 2\n        # Calculate the average and round it to the nearest integer\n        avg = round(total_sum / (m - n + 1))\n        # Convert the rounded average to binary\n        return bin(avg)\n\n# Example usage\nprint(rounded_avg(1, 5))  # => \"0b11\"\nprint(rounded_avg(7, 5))  # => -1\nprint(rounded_avg(10, 20))  # => \"0b1111\"\nprint(rounded_avg(20, 33))  # => \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Filter the list to include only numbers with no even digits\n    filtered_list = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Return the sorted filtered list\n    return sorted(filtered_list)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Dictionary to map numbers to their names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each number with its corresponding name\n    result = [num_to_name[num] for num in reversed_arr]\n    \n    return result\n\n# Example usage\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nprint(by_length(arr))  # Output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\narr_empty = []\nprint(by_length(arr_empty))  # Output: []\n\narr_strange = [1, -1, 55]\nprint(by_length(arr_strange))  # Output: [\"One\"]"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # Even\n            result.append(factorial(i))\n        else:  # Odd\n            result.append(sum_to_x(i))\n    return result\n\n# Example usage\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n# Example usage\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12))  # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(count_nums([]))  # Output: 0\n    print(count_nums([-1, 11, -11]))  # Output: 1\n    print(count_nums([1, 1, 2]))  # Output: 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    Check if it's possible to sort the array in non-decreasing order by performing\n    right shift operations.\n    \"\"\"\n    # If the array is empty or has one element, it's already sorted\n    if len(arr) <= 1:\n        return True\n    \n    # Count the number of times arr[i] > arr[i+1], which indicates the points\n    # where the array is not in non-decreasing order. For a right shift to sort\n    # the array, this should happen at most once.\n    shift_points = sum(arr[i] > arr[i+1] for i in range(len(arr)-1))\n    \n    # Check the transition from the last element to the first as well\n    if arr[-1] > arr[0]:\n        shift_points += 1\n    \n    # If there's more than one point where arr[i] > arr[i+1], it's not possible\n    # to sort the array with right shifts alone.\n    return shift_points <= 1\n\n# Example usage\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"Determines whether it is possible to exchange elements between two lists to make the first list all even numbers.\"\"\"\n    # Count the number of even numbers in lst1 and odd numbers in lst2\n    even_in_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_in_lst2 = sum(1 for x in lst2 if x % 2 != 0)\n    \n    # Count the number of odd numbers in lst1\n    odd_in_lst1 = len(lst1) - even_in_lst1\n    \n    # If there are more or equal odd numbers in lst1 than odd numbers in lst2, it's not possible to exchange\n    # to make all elements in lst1 even, because each odd number in lst1 needs to be replaced with an odd number from lst2.\n    if odd_in_lst1 > odd_in_lst2:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n# Example usage\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Expected: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Expected: \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the string into a list of letters\n    letters = test.split()\n    \n    # Create a dictionary to count occurrences of each letter\n    letter_counts = {}\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count of occurrences\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Create a dictionary to return letters with the maximum count\n    max_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return max_letters"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove characters in c from s\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(reverse_delete(\"abcde\", \"ae\"))  # ('bcd', False)\n    print(reverse_delete(\"abcdef\", \"b\"))  # ('acdef', False)\n    print(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize current sum and minimum sum to the first element\n    current_sum = min_sum = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # If current sum is positive, it's better to start a new subarray from the current element\n        # Otherwise, add the current element to the current sum\n        current_sum = min(num, current_sum + num)\n        \n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Example usage\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6"}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    Calculates the number of times buckets need to be lowered to empty the wells.\n    \"\"\"\n    # Count the total units of water in all wells\n    total_water_units = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times buckets need to be lowered\n    # by dividing the total units of water by the bucket capacity\n    # and rounding up to ensure all water is removed.\n    bucket_lowers = math.ceil(total_water_units / capacity)\n    \n    return bucket_lowers\n\n# Example usage\nif __name__ == \"__main__\":\n    print(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\n    print(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\n    print(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Define a list to hold words with exactly n consonants\n    words_with_n_consonants = []\n    \n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the consonants in the current word\n        consonant_count = sum(1 for char in word if char not in vowels)\n        \n        # If the consonant count matches n, add the word to the list\n        if consonant_count == n:\n            words_with_n_consonants.append(word)\n    \n    return words_with_n_consonants\n\n# Example usage\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # ==> []\nprint(select_words(\"Hello world\", 4))             # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # ==> [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    # Reverse the word to start checking from the right\n    reversed_word = word[::-1]\n    \n    for i in range(1, len(reversed_word) - 1):\n        # Check if the current character is a vowel and surrounded by consonants\n        if (reversed_word[i] in vowels and \n            reversed_word[i-1] not in vowels and \n            reversed_word[i+1] not in vowels):\n            return reversed_word[i]\n    \n    return \"\"\n\n# Example usage\nprint(get_closest_vowel(\"yogurt\"))  # ==> \"u\"\nprint(get_closest_vowel(\"FULL\"))    # ==> \"U\"\nprint(get_closest_vowel(\"quick\"))   # ==> \"\"\nprint(get_closest_vowel(\"ab\"))      # ==> \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # First, check if the total number of open and close parentheses are equal\n    total_open = sum(s.count('(') for s in lst)\n    total_close = sum(s.count(')') for s in lst)\n    if total_open != total_close:\n        return 'No'\n    \n    # Check if concatenating in one order makes a good string\n    if is_good(lst[0] + lst[1]):\n        return 'Yes'\n    # Check if concatenating in the reverse order makes a good string\n    if is_good(lst[1] + lst[0]):\n        return 'Yes'\n    \n    return 'No'\n\ndef is_good(s):\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n\n# Examples\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))    # Output: 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the array in descending order and then take the first k elements\n    sorted_arr = sorted(arr, reverse=True)[:k]\n    # Return the sorted list of the first k elements in ascending order\n    return sorted(sorted_arr)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\n    print(maximum([4, -4, 4], 2))   # Output: [4, 4]\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    # Initialize sum\n    odd_sum = 0\n    # Iterate through the list, considering only even positions (0-indexed)\n    for i in range(0, len(lst), 2):\n        # Check if the element is odd\n        if lst[i] % 2 != 0:\n            # Add it to the sum\n            odd_sum += lst[i]\n    return odd_sum\n\n# Example usage\nprint(solution([5, 8, 7, 1]))  # ==> 12\nprint(solution([3, 3, 3, 3, 3]))  # ==> 9\nprint(solution([30, 13, 24, 321]))  # ==> 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum\n    sum_of_elements = 0\n    \n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if 1 <= arr[i] <= 99:\n            # Add the element to the sum\n            sum_of_elements += arr[i]\n    \n    # Return the sum\n    return sum_of_elements\n\n# Example usage\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    # Initialize the list to store odd numbers\n    odd_numbers = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # Check if n is odd\n        if n % 2 != 0:\n            # Add to the list if it's odd\n            odd_numbers.append(n)\n        # Apply Collatz operation\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    \n    # Add 1 at the end, as it's always part of the sequence and is odd\n    odd_numbers.append(1)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)\n\n# Example usage\nprint(get_odd_collatz(5))  # Output: [1, 5]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    # Import the necessary module\n    from datetime import datetime\n    \n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check the format of the date\n    try:\n        parsed_date = datetime.strptime(date, \"%m-%d-%Y\")\n    except ValueError:\n        return False\n    \n    # Extract month and day from the parsed date\n    month = parsed_date.month\n    day = parsed_date.day\n    \n    # Define the maximum days in each month\n    max_days = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n                7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the day is valid for the given month\n    if day < 1 or day > max_days.get(month, 0):\n        return False\n    \n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check for whitespace and split if present\n    if ' ' in txt:\n        return txt.split()\n    # Check for comma and split if present\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lower-case letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Example usage\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # == 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    # Check for more than 1 duplicate of the same number\n    for num in lst:\n        if lst.count(num) > 2:\n            return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)\n\n# Example usage\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the intersection length of two intervals is a prime number.\"\"\"\n    # Find the intersection\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    # Check if there is an intersection\n    if start_max > end_min:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = end_min - start_max + 1\n    \n    # Check if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    \n    return magnitude_sum * sign_product\n\n# Example usage\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))  # Output: -9\n    print(prod_signs([0, 1]))  # Output: 0\n    print(prod_signs([]))  # Output: None"}
{"task_id": "HumanEval/129", "completion": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            if path < min_path:\n                min_path = path.copy()\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path\n\n# Example usage\ngrid1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk1 = 3\nprint(minPath(grid1, k1))  # Output: [1, 2, 1]\n\ngrid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk2 = 1\nprint(minPath(grid2, k2))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    # Base cases\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    # Initialize the list with base values\n    tribonacci = [1, 3]\n    \n    # Calculate the next values up to n\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # If i is even\n            tribonacci.append(1 + i / 2)\n        else:  # If i is odd\n            # Ensure the list has enough values to calculate the next one\n            # If not, recursively calculate the missing value\n            if i + 1 > len(tribonacci):\n                tribonacci.extend(tri(i - len(tribonacci)))\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1 - 2])\n    \n    return tribonacci\n\n# Example usage\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    # Initialize a counter for open brackets\n    open_brackets = 0\n    # Initialize a flag to check for nested brackets\n    nested = False\n\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 0:\n                open_brackets -= 1\n                # If there is an open bracket before, it means the current one is nested\n                if open_brackets > 0:\n                    nested = True\n            else:\n                # If there are no open brackets, it means the sequence is invalid\n                return False\n\n    # The string is valid only if all brackets are closed and at least one pair is nested\n    return nested and open_brackets == 0\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return sum(math.ceil(x)**2 for x in lst)\n\n# Example usage\nprint(sum_squares([1,2,3]))  # Output: 14\nprint(sum_squares([1,4,9]))  # Output: 98\nprint(sum_squares([1,3,5,7]))  # Output: 84\nprint(sum_squares([1.4,4.2,0]))  # Output: 29\nprint(sum_squares([-2.4,1,1]))  # Output: 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Check if the string is empty or ends with a space\n    if not txt or txt.endswith(' '):\n        return False\n    # Check if the last character is an alphabetical character\n    # and the character before the last (if exists) is a space\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')\n\n# Test the function with the provided examples\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Initialize the index to -1, assuming no such element exists\n    index = -1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Update the index to the current position\n            index = i\n            \n    # Return the found index or -1 if no such element exists\n    return index\n\n# Test the function with the provided examples\nprint(can_arrange([1,2,4,3,5]))  # Expected output: 3\nprint(can_arrange([1,2,3]))      # Expected output: -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Convert inputs to floats for comparison, handling both . and , as decimal points\n    def to_float(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_float = to_float(a)\n    b_float = to_float(b)\n    \n    # Compare the float representations\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # The smallest sum of 4 positive even numbers is 2+2+2+2 = 8\n    # Any even number greater than or equal to 8 can be written as the sum of exactly 4 positive even numbers\n    # This is because we can start with 2+2+2+2 and keep adding 2 to one of the numbers to get to the target even number\n    # For example, 10 can be written as 2+2+2+4, 12 as 2+2+2+6, and so on.\n    # Therefore, we just need to check if the number is even and greater than or equal to 8\n    return n % 2 == 0 and n >= 8"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(special_factorial(4))  # Expected output: 288"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # First replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Then replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text\n\n# Test the function\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n    # Regular expression to match the conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0-9]{0,2}\\.[a-zA-Z0"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:  # Index is a multiple of 3 but not of 4\n            total += num ** 2\n        elif i % 4 == 0:  # Index is a multiple of 4 (implicitly not a multiple of 3 due to the first condition)\n            total += num ** 3\n        else:\n            total += num\n    return total\n\n# Test cases\nprint(sum_squares([1,2,3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1,-5,2,-1,-5]))  # Output: -126"}
{"task_id": "HumanEval/143", "completion": "from sympy import isprime\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words whose lengths are prime numbers\n    prime_length_words = [word for word in words if isprime(len(word))]\n    \n    # Join the filtered words back into a string\n    return ' '.join(prime_length_words)\n\n# Example usage\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert the string representations of fractions to Fraction objects\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n    \n    # Multiply the fractions\n    result = frac_x * frac_n\n    \n    # Check if the result is a whole number by comparing its denominator to 1\n    return result.denominator == 1\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Sorting the list based on the sum of digits\n    # In case of a tie, the original order is preserved due to the stability of Python's sort\n    return sorted(nums, key=sum_of_digits)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\n    print(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(num):\n        # Convert number to positive to simplify extraction of digits\n        num = abs(num)\n        # Convert number to string to easily access first and last digits\n        str_num = str(num)\n        first_digit = int(str_num[0])\n        last_digit = int(str_num[-1])\n        # Check if both first and last digits are odd\n        return first_digit % 2 != 0 and last_digit % 2 != 0\n\n    # Use a list comprehension to filter numbers based on the given conditions\n    filtered_nums = [num for num in nums if num > 10 and is_first_and_last_digit_odd(num)]\n    # Return the count of filtered numbers\n    return len(filtered_nums)\n\n# Example usage\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Create the array a based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Counters for the remainders when elements of a are divided by 3\n    remainder_counts = [0, 0, 0]\n    \n    # Populate the remainder_counts list\n    for number in a:\n        remainder_counts[number % 3] += 1\n    \n    # Calculate the number of valid triples\n    # The formula used is based on combinatorics, considering the ways to pick elements\n    # such that their sum is a multiple of 3. This includes:\n    # - All three elements have a remainder of 0 when divided by 3\n    # - One element has a remainder of 0, one has a remainder of 1, and one has a remainder of 2\n    valid_triples = (remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6) + \\\n                    (remainder_counts[1] * remainder_counts[2] * remainder_counts[0]) + \\\n                    (remainder_counts[1] * (remainder_counts[1] - 1) * (remainder_counts[1] - 2) // 6) + \\\n                    (remainder_counts[2] * (remainder_counts[2] - 1) * (remainder_counts[2] - 2) // 6)\n    \n    return valid_triples\n\n# Example usage\nn = 5\nprint(get_max_triples(n))  # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # List of planets sorted by their proximity to the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are in the list\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indexes of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2 for correct slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Return the tuple of planets between the two indexes, exclusive\n    return tuple(planets[index1+1:index2])\n\n# Examples\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    \n    return even_length_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))  # Expected: [\"aa\"]\n    print(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))  # Expected: [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    return x if is_prime(n) else y\n\n# Example usage\nprint(x_or_y(7, 34, 12))  # Expected output: 34\nprint(x_or_y(15, 8, 5))   # Expected output: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Expected output: 10\nprint(double_the_difference([-1, -2, 0]))   # Expected output: 0\nprint(double_the_difference([9, -2]))       # Expected output: 81\nprint(double_the_difference([0]))           # Expected output: 0\nprint(double_the_difference([]))            # Expected output: 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Compares the actual scores with the guessed scores and returns an array indicating how far off each guess was.\n    \"\"\"\n    # Calculate the absolute difference between each pair of actual and guessed scores\n    differences = [abs(g - s) for g, s in zip(game, guess)]\n    return differences\n\n# Example usage\nif __name__ == \"__main__\":\n    print(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # Output: [0,0,0,0,3,3]\n    print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # Output: [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Expected: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Expected: 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    # Step 1: Quick check on lengths\n    if len(b) > len(a):\n        return False\n    \n    # Step 2: Generate all rotations of b by concatenating b with itself\n    # and then taking substrings of length equal to b's length\n    b_rotations = [b[i:i+len(b)] for i in range(len(b))]\n    \n    # Step 3: Check if any rotation of b is a substring of a\n    for rotation in b_rotations:\n        if rotation in a:\n            return True\n    \n    # Step 4: If no rotation is a substring, return False\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\")) # => False\nprint(cycpattern_check(\"hello\",\"ell\")) # => True\nprint(cycpattern_check(\"whassup\",\"psus\")) # => False\nprint(cycpattern_check(\"abab\",\"baa\")) # => True\nprint(cycpattern_check(\"efef\",\"eeff\")) # => False\nprint(cycpattern_check(\"himenss\",\"simen\")) # => True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a positive one to simplify counting\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through each digit in the number\n    while num > 0:\n        digit = num % 10  # Get the last digit\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10  # Remove the last digit\n    \n    return (even_count, odd_count)\n\n# Example usage\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # First, sort the sides to ensure a and b are the shorter sides and c is the hypotenuse\n    a, b, c = sorted([a, b, c])\n    \n    # Check if the square of the hypotenuse is equal to the sum of squares of the other two sides\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"\n    This function accepts a list of strings and returns the word with the maximum number of unique characters.\n    If multiple strings have the maximum number of unique characters, it returns the one which comes first in lexicographical order.\n    \"\"\"\n    # Sort the list first based on lexicographical order, then by the length of unique characters in descending order\n    sorted_words = sorted(words, key=lambda x: (-len(set(x)), x))\n    # Return the last element in the sorted list since it has the maximum number of unique characters and comes first lexicographically among those\n    return sorted_words[-1]\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n    \"\"\"\n    if remaining >= need:\n        # If there are enough remaining carrots to satisfy the need\n        total_eaten = number + need\n        remaining -= need\n    else:\n        # If there are not enough remaining carrots\n        total_eaten = number + remaining\n        remaining = 0\n    \n    return [total_eaten, remaining]\n\n# Example usage\nprint(eat(5, 6, 10))  # -> [11, 4]\nprint(eat(4, 8, 9))   # -> [12, 1]\nprint(eat(1, 10, 10)) # -> [11, 0]\nprint(eat(2, 11, 5))  # -> [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Start with the first operand\n    expression = str(operand[0])\n    \n    # Loop through the operators and operands to build the expression string\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    \n    # Evaluate the expression and return the result\n    return eval(expression)\n\n# Example usage\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)  # Output: 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Check if the string contains any letters\n    if any(c.isalpha() for c in s):\n        # Reverse the case for letters, keep others as is\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # If no letters, reverse the string\n        return s[::-1]\n\n# Example usage\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        # Encode the text to bytes, compute its md5 hash, and return the hexadecimal representation\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than b for the range function\n    if a > b:\n        a, b = b, a\n    \n    # Use list comprehension to generate even numbers between a and b\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n# Example usage\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []"}
